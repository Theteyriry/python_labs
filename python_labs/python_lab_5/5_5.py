import numpy as np
import matplotlib.pyplot as plt

# создаём массив x для линии: 100 точек от -5 до 5 включительно
x = np.linspace(-5, 5, 100)

# вычисляем y = x^2
y = x**2

# создаём генератор случайных чисел (фиксируем seed для воспроизводимости)
rng = np.random.default_rng()

# генерируем 50 случайных x для точечного графика в интервале [-5, 5]
x_scatter = rng.uniform(-5, 5, 50)

# генерируем 50 случайных y для точечного графика в интервале [-5, 5]
y_scatter = rng.uniform(-5, 5, 50)

# категориальные данные для столбчатой диаграммы
categories = ['A', 'B', 'C']

# значения для категорий (соответствуют A, B, C)
values = [3, 7, 2]

# создаём фигуру с тремя областями (1 строка, 3 столбца), размер 15×4
fig, axes = plt.subplots(1, 3, figsize=(15, 4))

# рисуем линию y = x^2 на первой оси
axes[0].plot(x, y)
# заголовок для первой области
axes[0].set_title('y = x^2')
# подпись оси X для первой области
axes[0].set_xlabel('x')
# подпись оси Y для первой области
axes[0].set_ylabel('y')
# включаем сетку для первой области
axes[0].grid(True)

# рисуем scatter (точечный) график на второй оси
axes[1].scatter(x_scatter, y_scatter)
# заголовок для второй области
axes[1].set_title('Случайные точки')
# подпись оси X для второй области
axes[1].set_xlabel('x')
# подпись оси Y для второй области
axes[1].set_ylabel('y')
# включаем сетку для второй области
axes[1].grid(True)

# рисуем столбчатую диаграмму для категорий на третьей оси
axes[2].bar(categories, values)
# заголовок для третьей области
axes[2].set_title('Категориальные данные')
# подпись оси X для третьей области
axes[2].set_xlabel('Категория')
# подпись оси Y для третьей области
axes[2].set_ylabel('Значение')

# автоматические отступы между субплотами, чтобы подписи не наслаивались
plt.tight_layout()

# показываем всю фигуру с тремя областями
plt.show()


print("x (для y = x^2):")
print(x)                    # массив x (100 значений)
print("\ny = x^2:")
print(y)                    # массив y (100 значений)

print("\nТочечные данные (x_scatter, y_scatter):")
print(list(zip(x_scatter, y_scatter)))

# печатаем категориальные данные и соответствующие значения
print("\nКатегории и их значения:")
for cat, val in zip(categories, values):
    print(f"{cat}: {val}")