#создаем поле из 9 клеток (первые 3 - первая строка и тд слева направо)
board = [" "] * 9  

#функция отображения поля с разделителями и переносами строк
def print_board():
    #в квадратных скобках обращаемся к элементу по индексу
    print(f"\n {board[0]} | {board[1]} | {board[2]}")  
    print("-----------")  
    print(f" {board[3]} | {board[4]} | {board[5]}")
    print("-----------")
    print(f" {board[6]} | {board[7]} | {board[8]}\n")  

#функция проверки победителя по значениям в ячейках
def check_win(player):
    
    wins = [
        #3 знака в строке
        [0, 1, 2], [3, 4, 5], [6, 7, 8],
        #3 знака в столбце  
        [0, 3, 6], [1, 4, 7], [2, 5, 8], 
        #3 знака по диагонали 
        [0, 4, 8], [2, 4, 6]              
    ]
    #цикл проверки игрока X или O
    #перебираем все выигрышные комбинации (наборы в wins)
    for line in wins:
        #если все элементы доски (на выигрышных позициях) занимает символ текущего игрока, true
        if all(board[i] == player for i in line):
            return True
    return False

#создаем функцию игры
def tictactoe():
    #задаем символ первого игрока
    current_player = "X"
    moves_count = 0  # Счетчик ходов для оптимизации
    
    print("Добро пожаловать в игру Крестики-нолики!")
    print("Клетки поля пронумерованы от 1 до 9:")
    print(" 1 | 2 | 3 ")
    print("-----------")
    print(" 4 | 5 | 6 ")
    print("-----------")
    print(" 7 | 8 | 9 ")
    
    while True:
        #выводим текущее поле
        print_board()
        #текущий игрок выбирает клетку, куда поставит свой символ
        move = input(f"{current_player}, выберите номер клетки: ")
        
        # Проверка введенных данных
        if not move.isdigit() or int(move) < 1 or int(move) > 9:
            print("Введите номер клетки!")
            #цикл запускается заново и требует ввод
            continue

        #вычисляем номер клетки (поле начинается с 1, а индексы с 0)   
        idx = int(move) - 1
        
        #если выбранная клетка не пустая, выводим предупреждение и повторяем ввод
        if board[idx] != " ":
            print("Занято! Выберите другую клетку")
            continue
        
        #Если цикл дошел до этого момента, записываем символ игрока в выбранную клетку
        board[idx] = current_player
        #увеличиваем количество ходов 
        moves_count += 1
        
        #Проверка победы текущего игрока (если победил, завершаем цикл)
        if check_win(current_player):
            print_board()
            print(f"Ура! Победил {current_player}!")
            break
        
        #Проверка ничьи (если никто не победил, а занято уже 9 клеток, ничья, прерываем цикл))
        if moves_count == 9:
            print_board()
            print("Ничья!")
            break
        
        #Если игра продолжается, меняем игрока (проверяем, какой сейчас, ставим другого)
        if current_player == "X":
            current_player = "O"
        else:
            current_player = "X"
    
    #Когда мы вышли из цикла (игра окончена), предлагаем повторить игру
    while True:
        answer = input("Хотите сыграть еще раз? (да/нет): ").lower()
        if answer == "да":
            #Очищаем поле
            for i in range(9):
                board[i] = " "
            #запускаем игру заново
            tictactoe()
            break
        else:
            print("С Вами приятно играть! Возвращайтесь")
            break

# Запуск игры
if __name__ == "__main__":
    tictactoe()